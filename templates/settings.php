<?php
/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class GTMConsentSettings {
	private $gtm_consent_options;

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'gtm_consent_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'gtm_consent_page_init' ) );
	}

	public function gtm_consent_add_plugin_page() {
		add_management_page(
			'GTM Consent', // page_title
			'GTM Consent', // menu_title
			'manage_options', // capability
			'gtm-consent', // menu_slug
			array( $this, 'gtm_consent_create_admin_page' ) // function
		);
	}

	public function gtm_consent_create_admin_page() {
		$this->gtm_consent_options = get_option( 'gtm_consent_option_name' ); ?>

		<div class="wrap">
			<h2>GTM Consent</h2>
			<p>
				Add the shortcode <b>[consent_popup]</b> to use this plugin.<br>
				Add the shortcode <b>[consent_buttons]</b> to display consent buttons on any page.
			</p>
			<p>The following css classes are available for customization:<br>
			- <b>gc-card</b><br>
			- <b>gc-btn-reject</b><br>
			- <b>gc-btn-accept</b>
			</p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'gtm_consent_option_group' );
					do_settings_sections( 'script-consent-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }

	public function gtm_consent_page_init() {
		register_setting(
			'gtm_consent_option_group', // option_group
			'gtm_consent_option_name', // option_name
			array( $this, 'gtm_consent_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'gtm_consent_setting_section', // id
			'', // title
			array( $this, 'gtm_consent_section_info' ), // callback
			'script-consent-admin' // page
		);

		add_settings_field(
			'container_0', // id
			'Container ID', // title
			array( $this, 'container_0_callback' ), // callback
			'script-consent-admin', // page
			'gtm_consent_setting_section' // section
		);

		add_settings_field(
			'accept_by_default_1', // id
			'Accept by default', // title
			array( $this, 'accept_by_default_1_callback' ), // callback
			'script-consent-admin', // page
			'gtm_consent_setting_section' // section
		);

		add_settings_field(
			'disclaimer_2', // id
			'Disclaimer', // title
			array( $this, 'disclaimer_2_callback' ), // callback
			'script-consent-admin', // page
			'gtm_consent_setting_section' // section
		);

		add_settings_field(
			'background_3', // id
			'Background', // title
			array( $this, 'background_3_callback' ), // callback
			'script-consent-admin', // page
			'gtm_consent_setting_section' // section
		);
	}

	public function gtm_consent_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['container_0'] ) ) {
			$sanitary_values['container_0'] = $input['container_0'];
		}

		if ( isset( $input['accept_by_default_1'] ) ) {
			$sanitary_values['accept_by_default_1'] = $input['accept_by_default_1'];
		}

		if ( isset( $input['disclaimer_2'] ) ) {
			$sanitary_values['disclaimer_2'] = $input['disclaimer_2'];
		}

		if ( isset( $input['background_3'] ) ) {
			$sanitary_values['background_3'] = $input['background_3'];
		}

		return $sanitary_values;
	}

	public function gtm_consent_section_info() {
		
	}

	public function container_0_callback() {
		printf(
			'<input class="regular-text" type="text" name="gtm_consent_option_name[container_0]" id="container_0" value="%s">',
			isset( $this->gtm_consent_options['container_0'] ) ? esc_attr( $this->gtm_consent_options['container_0']) : ''
		);
	}

	public function accept_by_default_1_callback() {
		printf(
			'<input type="checkbox" name="gtm_consent_option_name[accept_by_default_1]" id="accept_by_default_1" value="accept_by_default_1" %s> <label for="accept_by_default_1">(Not recommended)</label>',
			( isset( $this->gtm_consent_options['accept_by_default_1'] ) && $this->gtm_consent_options['accept_by_default_1'] === 'accept_by_default_1' ) ? 'checked' : ''
		);
	}

	public function disclaimer_2_callback() {
		printf(
			'<textarea class="large-text" rows="2" name="gtm_consent_option_name[disclaimer_2]" id="disclaimer_2">%s</textarea>',
			isset( $this->gtm_consent_options['disclaimer_2'] ) ? esc_attr( $this->gtm_consent_options['disclaimer_2']) : ''
		);
	}

	public function background_3_callback() {
		?> <fieldset><?php $checked = ( isset( $this->gtm_consent_options['background_3'] ) && $this->gtm_consent_options['background_3'] === 'dark' ) ? 'checked' : '' ; ?>
		<label for="background_3-0"><input type="radio" name="gtm_consent_option_name[background_3]" id="background_3-0" value="dark" <?php echo $checked; ?>> Dark</label><br>
		<?php $checked = ( isset( $this->gtm_consent_options['background_3'] ) && $this->gtm_consent_options['background_3'] === 'light' ) ? 'checked' : '' ; ?>
		<label for="background_3-1"><input type="radio" name="gtm_consent_option_name[background_3]" id="background_3-1" value="light" <?php echo $checked; ?>> Light</label></fieldset> <?php
	}

}
if ( is_admin() )
	$gtm_consent = new GTMConsentSettings();

/* 
 * Retrieve this value with:
 * $gtm_consent_options = get_option( 'gtm_consent_option_name' ); // Array of All Options
 * $container_0 = $gtm_consent_options['container_0']; // Container ID
 * $accept_by_default_1 = $gtm_consent_options['accept_by_default_1']; // Accept by default
 * $disclaimer_2 = $gtm_consent_options['disclaimer_2']; // Disclaimer
 * $background_3 = $gtm_consent_options['background_3']; // Background

 */
